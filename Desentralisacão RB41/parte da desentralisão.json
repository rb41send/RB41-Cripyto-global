import socket
import threading

class P2PClientHandler:
    def __init__(self, server_socket, client_socket, client_addr):
        self.server_socket = server_socket
        self.client_socket = client_socket
        self.client_addr = client_addr

    def handle_client(self):
        try:
            print(f"Conexão P2P de {self.client_addr[0]}:{self.client_addr[1]}")

            if not self.server_socket.first_client_addr:
                self.server_socket.first_client_addr = self.client_addr

            if self.client_addr == self.server_socket.first_client_addr:
                print(f"{self.client_addr[0]}:{self.client_addr[1]} é o primeiro cliente.")
                self.server_socket.server = self.client_socket

                while True:
                    data, _ = self.server_socket.server.recvfrom(1024)
                    if not data:
                        break

                    print(f"Dados recebidos do servidor Flask: {data.decode('utf-8')}")
                    self.server_socket.data_from_server[self.client_addr] = data.decode('utf-8')

                    for addr, socket_udp in self.server_socket.connected_clients.items():
                        try:
                            socket_udp.sendto(data, addr)
                        except Exception as e:
                            print(f"Erro ao enviar dados para {addr[0]}:{addr[1]}: {e}")
            else:
                self.server_socket.connected_clients[self.client_addr] = self.client_socket

                while True:
                    data, _ = self.client_socket.recvfrom(1024)
                    if not data:
                        break

                    print(f"Dados recebidos de {self.client_addr[0]}:{self.client_addr[1]}: {data.decode('utf-8')}")

                    if self.server_socket.server:
                        try:
                            self.server_socket.server.sendto(data, self.server_socket.first_client_addr)
                        except Exception as e:
                            print(f"Erro ao enviar dados para o servidor Flask: {e}")

        except Exception as e:
            print(f"Erro na conexão P2P de {self.client_addr[0]}:{self.client_addr[1]}: {e}")
        finally:
            self.client_socket.close()
            if self.client_addr in self.server_socket.connected_clients:
                del self.server_socket.connected_clients[self.client_addr]
            if self.client_addr == self.server_socket.first_client_addr:
                self.server_socket.server = None
                self.server_socket.first_client_addr = None
            print(f"Conexão P2P com {self.client_addr[0]}:{self.client_addr[1]} encerrada")

class P2PServer:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.connected_clients = {}
        self.server = None
        self.first_client_addr = None
        self.data_from_server = {}
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.server_socket.bind((self.host, self.port))

    def run_flask(self):
        app.run(host='0.0.0.0', port=2096)

    def start(self):
        flask_thread = threading.Thread(target=self.run_flask)
        flask_thread.start()

        print("Servidor P2P UDP e Flask iniciados nas portas 2083 e 2096")

        try:
            while True:
                client_socket, client_addr = self.server_socket.recvfrom(1024)

                client_handler = P2PClientHandler(self, client_socket, client_addr)
                client_thread = threading.Thread(target=client_handler.handle_client)
                client_thread.start()

                if not self.first_client_addr:
                    self.first_client_addr = client_addr
                    print(f"Primeiro cliente conectado: {client_addr[0]}:{client_addr[1]}")
                    self.server = client_socket
                else:
                    try:
                        self.server.sendto(self.data_from_server[client_addr].encode('utf-8'), client_addr)
                    except KeyError:
                        print(f"Cliente {client_addr[0]}:{client_addr[1]} não possui dados do servidor.")
        except Exception as e:
            print(f"Erro ao iniciar o servidor P2P: {e}")
        finally:
            self.server_socket.close()

if __name__ == "__main__":
    p2p_server = P2PServer('127.0.0.1', 2083)
    p2p_server.start()
